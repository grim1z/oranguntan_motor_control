
motor control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000002d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000174b  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b10  00000000  00000000  00001b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  0000263b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000721  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c8  00000000  00000000  0000372d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000037f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 67 00 	call	0xce	; 0xce <main>
  88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
system_init();
  90:	0e 94 ab 00 	call	0x156	; 0x156 <system_init>
  94:	08 95       	ret

00000096 <__vector_4>:

#include <atmel_start.h>
#include <compiler.h>
extern int motor1_steps;
				ISR(PCINT1_vect)
				{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
 */
static inline void PORTD_set_pin_level(
	const uint8_t pin,
	const bool level)
{
	if (level) {
  a4:	30 9b       	sbis	0x06, 0	; 6
  a6:	02 c0       	rjmp	.+4      	; 0xac <__vector_4+0x16>
		PORTD |= 1 << pin;
  a8:	59 9a       	sbi	0x0b, 1	; 11
  aa:	01 c0       	rjmp	.+2      	; 0xae <__vector_4+0x18>
	} else {
		PORTD &= ~(1 << pin);
  ac:	59 98       	cbi	0x0b, 1	; 11
					PD1_set_level(PC0_get_level());
					motor1_steps ++;
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					/* Insert your pin change 1 interrupt handling code here */

				}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:
	
}

int main(void)
{
	motor1_steps = 0;
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	atmel_start_init();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <atmel_start_init>
	const uint8_t pin,
	const enum port_dir direction)
{
	switch(direction) {
		case PORT_DIR_IN:
			DDRC &= ~(1 << pin);
  da:	38 98       	cbi	0x07, 0	; 7
	const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRC &= ~(1 << pin);
  dc:	38 98       	cbi	0x07, 0	; 7

	PORTC |= 1 << pin;
  de:	40 9a       	sbi	0x08, 0	; 8
	switch(direction) {
		case PORT_DIR_IN:
			DDRB &= ~(1 << pin);
			break;
		case PORT_DIR_OUT:
			DDRB |= 1 << pin;
  e0:	23 9a       	sbi	0x04, 3	; 4
	switch(direction) {
		case PORT_DIR_IN:
			DDRD &= ~(1 << pin);
			break;
		case PORT_DIR_OUT:
			DDRD |= 1 << pin;
  e2:	53 9a       	sbi	0x0a, 3	; 10
  e4:	51 9a       	sbi	0x0a, 1	; 10
	switch(direction) {
		case PORT_DIR_IN:
			DDRB &= ~(1 << pin);
			break;
		case PORT_DIR_OUT:
			DDRB |= 1 << pin;
  e6:	23 9a       	sbi	0x04, 3	; 4
	switch(direction) {
		case PORT_DIR_IN:
			DDRD &= ~(1 << pin);
			break;
		case PORT_DIR_OUT:
			DDRD |= 1 << pin;
  e8:	53 9a       	sbi	0x0a, 3	; 10
	PB3_set_dir(PORT_DIR_OUT);
	PD3_set_dir(PORT_DIR_OUT);
	PD1_set_dir(PORT_DIR_OUT);
	PB3_set_dir(PORT_DIR_OUT);
	PD3_set_dir(PORT_DIR_OUT);
	cpu_irq_enable();
  ea:	78 94       	sei
int main(void)
{
	motor1_steps = 0;
	atmel_start_init();
	int target_rpm = 60;
	int control = 0;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
	PD3_set_dir(PORT_DIR_OUT);
	cpu_irq_enable();
	/* Replace with your application code */
	P=1;
	while(1) {
		error = target_rpm_in_steps_per_100ms - motor1_steps;
  f0:	40 e4       	ldi	r20, 0x40	; 64
  f2:	5b e0       	ldi	r21, 0x0B	; 11
  f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  fc:	ba 01       	movw	r22, r20
  fe:	62 1b       	sub	r22, r18
 100:	73 0b       	sbc	r23, r19
		control = control + P*error;
 102:	86 0f       	add	r24, r22
 104:	97 1f       	adc	r25, r23
 *
 * \param[in] value The new compare value to set 
 */
static inline void TIMER_0_set_comp_a(uint8_t value)
{
	OCR0A = value;
 106:	87 bd       	out	0x27, r24	; 39
		TIMER_0_set_comp_a(control);
		motor1_steps = 0;
 108:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 10c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	7f e7       	ldi	r23, 0x7F	; 127
 112:	2a e1       	ldi	r18, 0x1A	; 26
 114:	36 e0       	ldi	r19, 0x06	; 6
 116:	71 50       	subi	r23, 0x01	; 1
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x48>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x52>
 120:	00 00       	nop
 122:	e8 cf       	rjmp	.-48     	; 0xf4 <main+0x26>

00000124 <exint_0_init>:
	const uint8_t pin,
	const enum port_dir direction)
{
	switch(direction) {
		case PORT_DIR_IN:
			DDRC &= ~(1 << pin);
 124:	38 98       	cbi	0x07, 0	; 7
		DDRC &= ~(1 << pin);

	PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

	PORTC &= ~(1 << pin);
 126:	40 98       	cbi	0x08, 0	; 8
	const uint8_t pin,
	const enum port_dir direction)
{
	switch(direction) {
		case PORT_DIR_IN:
			DDRC &= ~(1 << pin);
 128:	39 98       	cbi	0x07, 1	; 7
		DDRC &= ~(1 << pin);

	PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

	PORTC &= ~(1 << pin);
 12a:	41 98       	cbi	0x08, 1	; 8
	const uint8_t pin,
	const enum port_dir direction)
{
	switch(direction) {
		case PORT_DIR_IN:
			DDRC &= ~(1 << pin);
 12c:	3a 98       	cbi	0x07, 2	; 7
		DDRC &= ~(1 << pin);

	PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

	PORTC &= ~(1 << pin);
 12e:	42 98       	cbi	0x08, 2	; 8
	const uint8_t pin,
	const enum port_dir direction)
{
	switch(direction) {
		case PORT_DIR_IN:
			DDRC &= ~(1 << pin);
 130:	3b 98       	cbi	0x07, 3	; 7
		DDRC &= ~(1 << pin);

	PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

	PORTC &= ~(1 << pin);
 132:	43 98       	cbi	0x08, 3	; 8
        // <id> pad_pull_config
        // <PORT_PULL_OFF"> Off
        // <PORT_PULL_UP"> Pull-up
        PORT_PULL_OFF);

	EXTERNAL_IRQ_0_init();
 134:	0e 94 cc 00 	call	0x198	; 0x198 <EXTERNAL_IRQ_0_init>
 138:	08 95       	ret

0000013a <tc8_0_init>:
	switch(direction) {
		case PORT_DIR_IN:
			DDRD &= ~(1 << pin);
			break;
		case PORT_DIR_OUT:
			DDRD |= 1 << pin;
 13a:	56 9a       	sbi	0x0a, 6	; 10
	const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 13c:	5e 98       	cbi	0x0b, 6	; 11
	switch(direction) {
		case PORT_DIR_IN:
			DDRD &= ~(1 << pin);
			break;
		case PORT_DIR_OUT:
			DDRD |= 1 << pin;
 13e:	55 9a       	sbi	0x0a, 5	; 10
	const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 140:	5d 98       	cbi	0x0b, 5	; 11
        // <id> pad_initial_level
        // <false"> Low
        // <true"> High
        false);

	TIMER_0_init();
 142:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TIMER_0_init>
 146:	08 95       	ret

00000148 <tc8_2_init>:
	switch(direction) {
		case PORT_DIR_IN:
			DDRB &= ~(1 << pin);
			break;
		case PORT_DIR_OUT:
			DDRB |= 1 << pin;
 148:	23 9a       	sbi	0x04, 3	; 4
	const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 14a:	2b 98       	cbi	0x05, 3	; 5
	switch(direction) {
		case PORT_DIR_IN:
			DDRD &= ~(1 << pin);
			break;
		case PORT_DIR_OUT:
			DDRD |= 1 << pin;
 14c:	53 9a       	sbi	0x0a, 3	; 10
	const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 14e:	5b 98       	cbi	0x0b, 3	; 11
        // <id> pad_initial_level
        // <false"> Low
        // <true"> High
        false);

	TIMER_2_init();
 150:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TIMER_2_init>
 154:	08 95       	ret

00000156 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

    PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | 
 156:	8f ee       	ldi	r24, 0xEF	; 239
 158:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
			break;
		case PORT_DIR_OUT:
			DDRB |= mask;
			break;
		case PORT_DIR_OFF:
			DDRB &= ~mask;
 15c:	84 b1       	in	r24, 0x04	; 4
 15e:	14 b8       	out	0x04, r1	; 4

	PORTB |= mask;
 160:	85 b1       	in	r24, 0x05	; 5
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	95 b9       	out	0x05, r25	; 5
			break;
		case PORT_DIR_OUT:
			DDRC |= mask;
			break;
		case PORT_DIR_OFF:
			DDRC &= ~mask;
 166:	87 b1       	in	r24, 0x07	; 7
 168:	80 78       	andi	r24, 0x80	; 128
 16a:	87 b9       	out	0x07, r24	; 7

	PORTC |= mask;
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	8f 67       	ori	r24, 0x7F	; 127
 170:	88 b9       	out	0x08, r24	; 8
			break;
		case PORT_DIR_OUT:
			DDRD |= mask;
			break;
		case PORT_DIR_OFF:
			DDRD &= ~mask;
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	1a b8       	out	0x0a, r1	; 10

	PORTD |= mask;
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
    /* Set up system clock prescaler according to configuration */
      protected_write_io((void*)&CLKPR, 1 << CLKPCE,(0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0) );
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	60 e8       	ldi	r22, 0x80	; 128
 17e:	81 e6       	ldi	r24, 0x61	; 97
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <protected_write_io>

    SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 186:	13 be       	out	0x33, r1	; 51
    		(0 << SE);

    MCUCR = (0 << PUD);
 188:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

sysctrl_init();

exint_0_init();
 18a:	0e 94 92 00 	call	0x124	; 0x124 <exint_0_init>

//I2C_0_init();

tc8_0_init();
 18e:	0e 94 9d 00 	call	0x13a	; 0x13a <tc8_0_init>

tc8_2_init();
 192:	0e 94 a4 00 	call	0x148	; 0x148 <tc8_2_init>
 196:	08 95       	ret

00000198 <EXTERNAL_IRQ_0_init>:
#include <exint.h>

int8_t EXTERNAL_IRQ_0_init()
{

PCICR = (1 << PCIE1); // Enable pin change interrupt 1
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

PCMSK1 = (1 << PCINT8) | // Pin change enable mask 8
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
(1 << PCINT9) | // Pin change enable mask 9
(1 << PCINT10) | // Pin change enable mask 10
(1 << PCINT11); // Pin change enable mask 11

	return 0;
}
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18, _SFR_IO_ADDR(SREG)
 1a8:	2f b7       	in	r18, 0x3f	; 63
	cli
 1aa:	f8 94       	cli
	
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1               // Clear bits 23:16 of Z
#endif
	mov    r30, r24                // Load addr into Z
 1ac:	e8 2f       	mov	r30, r24
	mov    r31, r25
 1ae:	f9 2f       	mov	r31, r25
	st      Z, r22                  // Write protection bit to I/O register
 1b0:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 1b2:	40 83       	st	Z, r20

	out     _SFR_IO_ADDR(SREG), r18
 1b4:	2f bf       	out	0x3f, r18	; 63
	ret                             // Return to caller
 1b6:	08 95       	ret

000001b8 <TIMER_0_init>:
 * \brief Initialize TIMER_0 interface
 */
int8_t TIMER_0_init()
{
	/* Enable TC0 */
	PRR &= ~(1 << PRTIM0);
 1b8:	e4 e6       	ldi	r30, 0x64	; 100
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	8f 7d       	andi	r24, 0xDF	; 223
 1c0:	80 83       	st	Z, r24
    TCCR0A = (1 << COM0A1) | (0 << COM0A0) | // Clear OCA on Compare Match, set OCA on BOTTOM (non-inverting mode)
 1c2:	83 ea       	ldi	r24, 0xA3	; 163
 1c4:	84 bd       	out	0x24, r24	; 36
              (1 << COM0B1) | (0 << COM0B0) | // Clear OCA on Compare Match, set OCA on BOTTOM (non-inverting mode)
              (1 << WGM01) | (1 << WGM00); // Mode 3 Fast PWM

    TCCR0B = ( 0 << WGM02 ) | // Mode 3 Fast PWM
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	85 bd       	out	0x25, r24	; 37
				(0 << CS02) | (0 << CS01) | (1 << CS00);
             // (0 << CS02) | (1 << CS01) | (0 << CS00); // IO clock divided by 8

    TIMSK0 = (0 << OCIE0B) | // Disable output compare match B interrupt
 1ca:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
              (0 << OCIE0A) | // Disable output compare match A interrupt
              (0 << TOIE0);   // Disable overflow interrupt

    return 0;
}
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret

000001d2 <TIMER_2_init>:
 * \brief Initialize TIMER_2 interface
 */
int8_t TIMER_2_init()
{
	/* Enable TC2 */
	PRR &= ~(1 << PRTIM2);
 1d2:	e4 e6       	ldi	r30, 0x64	; 100
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	8f 7b       	andi	r24, 0xBF	; 191
 1da:	80 83       	st	Z, r24
    TCCR2A = (1 << COM2A1) | (0 << COM2A0) | // Clear OCA on Compare Match, set OCA on BOTTOM (non-inverting mode)
 1dc:	83 ea       	ldi	r24, 0xA3	; 163
 1de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
              (1 << COM2B1) | (0 << COM2B0) | // Clear OCA on Compare Match, set OCA on BOTTOM (non-inverting mode)
              (1 << WGM21) | (1 << WGM20); // Mode 3 Fast PWM

    TCCR2B = ( 0 << WGM22 ) | // Mode 3 Fast PWM
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
              (0 << CS22) | (1 << CS21) | (0 << CS20); // IO clock divided by 8

    TIMSK2 = (0 << OCIE2B) | // Disable output compare match B interrupt
 1e8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
              (0 << OCIE2A) | // Disable output compare match A interrupt
              (0 << TOIE2);   // Disable overflow interrupt

    return 0;
}
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
